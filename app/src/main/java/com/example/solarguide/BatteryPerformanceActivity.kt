    package com.example.solarguide

    import android.media.MediaPlayer
    import android.os.Build
    import android.os.Bundle
    import android.util.Log
    import android.widget.ImageView
    import android.widget.Toast
    import androidx.appcompat.app.AppCompatActivity
    import com.google.firebase.auth.FirebaseAuth
    import com.google.firebase.database.*
    import com.example.solarguide.databinding.ActivityBatteryPerformanceBinding

    class BatteryPerformanceActivity : AppCompatActivity() {

        private lateinit var binding: ActivityBatteryPerformanceBinding
        private lateinit var database: DatabaseReference
        private lateinit var firebaseAuth: FirebaseAuth
        private var databaseListener: ValueEventListener? = null
        private lateinit var popPlayer: MediaPlayer

        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            binding = ActivityBatteryPerformanceBinding.inflate(layoutInflater)
            setContentView(binding.root)

            popPlayer = MediaPlayer.create(this, R.raw.pop_sound)

            // Setting up tooltips for battery information icons
            setupTooltips()

            firebaseAuth = FirebaseAuth.getInstance()

            // Specify the correct database URL
            val databaseUrl = "https://solarguide-default-rtdb.asia-southeast1.firebasedatabase.app/"
            database = FirebaseDatabase.getInstance(databaseUrl).reference.child("sensorData")

            fetchDataAndDisplay()
            setupMenuButtons()
        }

        private fun setupTooltips() {
            val infovoltage: ImageView = findViewById(R.id.info_voltage)
            setTooltip(infovoltage, "Electric difference generated by solar panels and stored in a battery.")

            val infostored: ImageView = findViewById(R.id.info_stored)
            setTooltip(infostored, "Stored voltage is the battery's energy, charged by solar panels")

            val infobatt: ImageView = findViewById(R.id.info_batt)
            setTooltip(infobatt, "Battery stores energy from solar panels, providing power")

            val infopercent: ImageView = findViewById(R.id.info_percent)
            setTooltip(infopercent, "Shows the percentage of the remaining charge, indicating available stored energy.")

        }

        private fun setTooltip(view: ImageView, message: String) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                view.tooltipText = message
            } else {
                view.setOnLongClickListener {
                    Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
                    true
                }
            }
        }

        private fun fetchDataAndDisplay() {
            databaseListener = object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    if (snapshot.exists()) {
                        // Retrieve battery data from Firebase
                        val batteryVoltage = snapshot.child("Battery Voltage").getValue(String::class.java)?.toFloatOrNull() ?: 0f
                        val batteryPercentage = snapshot.child("Battery Percentage").getValue(String::class.java)?.toFloatOrNull() ?: 0f
                        val isCharging = snapshot.child("isCharging").getValue(String::class.java)?.toBoolean() ?: false

                        // Display the data
                        binding.TextBatteryVoltage.text = batteryVoltage.toString()
                        binding.TextTodayBatteryValue.text = batteryPercentage.toString()

                        // Set the battery icon based on the charging status
                        val batteryvoltage: ImageView = findViewById(R.id.battery_voltage)
                        if (isCharging) {
                            batteryvoltage.setImageResource(R.drawable.voltage_gif)
                        } else {
                            batteryvoltage.setImageResource(R.drawable.voltage)
                        }

                        val batteryIcon: ImageView = findViewById(R.id.battery_icon)
                        if (isCharging) {
                            batteryIcon.setImageResource(R.drawable.battery_gif)
                        } else {
                            batteryIcon.setImageResource(R.drawable.battery_status)
                        }

                        // Update the battery status drawable and text
                        updateBatteryStatus(batteryPercentage, isCharging)

                        Log.d("BatteryPerformanceActivity", "Battery Discharge Today: $batteryVoltage")
                        Log.d("BatteryPerformanceActivity", "Battery Percentage: $batteryPercentage")
                        Log.d("BatteryPerformanceActivity", "Is Charging: $isCharging")
                    } else {
                        Log.d("BatteryPerformanceActivity", "Data snapshot does not exist")
                    }
                }

                override fun onCancelled(error: DatabaseError) {
                    Log.e("BatteryPerformanceActivity", "Database error: ${error.message}")
                    Toast.makeText(this@BatteryPerformanceActivity, "Failed to load data", Toast.LENGTH_SHORT).show()
                }
            }
            database.addValueEventListener(databaseListener!!)
        }

        private fun updateBatteryStatus(batteryPercentage: Float, isCharging: Boolean) {
            val batteryStatusText = binding.TextBatteryStatus // Assuming this is the ID for the TextView showing the status
            val batteryStatusIcon: ImageView = findViewById(R.id.battery_status) // ID for the battery status drawable

            when {
                batteryPercentage >= 100 -> {
                    batteryStatusText.text = getString(R.string.battery_fully_charged)
                    batteryStatusIcon.setImageResource(R.drawable.full_charge) // Replace with your fully charged icon
                }
                isCharging -> {
                    batteryStatusText.text = getString(R.string.battery_charging)
                    batteryStatusIcon.setImageResource(R.drawable.charging) // Replace with your charging icon
                }
                else -> {
                    batteryStatusText.text = getString(R.string.battery_not_charging)
                    batteryStatusIcon.setImageResource(R.drawable.not_charging) // Replace with your not charging icon
                }
            }
        }


        override fun onDestroy() {
            super.onDestroy()
            databaseListener?.let { database.removeEventListener(it) }
        }

        private fun setupMenuButtons() {
            val frameLayoutIds = listOf(
                R.id.WeatherFrameButton,
                R.id.BatteryFrameButton,
                R.id.PanelFrameButton,
                R.id.DevicesFrameButton,
                R.id.AccountFrameButton
            )

            val activities = listOf(
                WeatherActivity::class.java,
                BatteryPerformanceActivity::class.java,
                PanelPerformanceActivity::class.java,
                AvailableDevicesActivity::class.java,
                AccountActivity::class.java
            )

            ButtonUtils.setMenuButtonClickListener(this, frameLayoutIds, activities)
            popPlayer.start()
        }
    }