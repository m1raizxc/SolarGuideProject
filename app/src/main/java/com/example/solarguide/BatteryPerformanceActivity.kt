package com.example.solarguide

import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.media.MediaPlayer
import android.os.Build
import android.os.Bundle
import android.os.BatteryManager
import android.util.Log
import android.widget.ImageView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.core.app.NotificationCompat
import com.example.solarguide.databinding.ActivityBatteryPerformanceBinding
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.*

class BatteryReceiver : BroadcastReceiver {
    private var batteryStatusListener: ((Int, Boolean) -> Unit)? = null

    // Default constructor
    constructor() : super()

    // Custom constructor with a listener
    constructor(batteryStatusListener: (Int, Boolean) -> Unit) : super() {
        this.batteryStatusListener = batteryStatusListener
    }

    override fun onReceive(context: Context, intent: Intent) {
        val batteryLevel = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1)
        val isCharging = intent.getIntExtra(BatteryManager.EXTRA_STATUS, -1) == BatteryManager.BATTERY_STATUS_CHARGING
        batteryStatusListener?.invoke(batteryLevel, isCharging)
    }
}



class BatteryPerformanceActivity : AppCompatActivity() {

    private lateinit var binding: ActivityBatteryPerformanceBinding
    private lateinit var database: DatabaseReference
    private lateinit var firebaseAuth: FirebaseAuth
    private var databaseListener: ValueEventListener? = null
    private lateinit var popPlayer: MediaPlayer

    private val criticalBatteryThreshold = 30 // Set the critical battery percentage

    private lateinit var batteryReceiver: BatteryReceiver

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityBatteryPerformanceBinding.inflate(layoutInflater)
        setContentView(binding.root)

        popPlayer = MediaPlayer.create(this, R.raw.pop_sound)

        // Initialize the battery receiver with the callback function
        batteryReceiver = BatteryReceiver { batteryLevel, isCharging ->
            // Update the battery status when a change is detected
            updateBatteryStatus(batteryLevel.toFloat(), isCharging)
        }

        // Register the receiver to listen for battery status changes
        val filter = IntentFilter(Intent.ACTION_BATTERY_CHANGED)
        registerReceiver(batteryReceiver, filter)

        // Initialize the battery receiver with the callback function
        batteryReceiver = BatteryReceiver { batteryLevel, isCharging ->
            // Update the battery status when a change is detected
            updateBatteryStatus(batteryLevel.toFloat(), isCharging)
        }


        // Setting up tooltips for battery information icons
        setupTooltips()

        firebaseAuth = FirebaseAuth.getInstance()

        // Specify the correct database URL
        val databaseUrl = "https://solarguide-default-rtdb.asia-southeast1.firebasedatabase.app/"
        database = FirebaseDatabase.getInstance(databaseUrl).reference.child("sensorData")

        fetchDataAndDisplay()
        setupMenuButtons()
    }

    private fun setupTooltips() {
        val infovoltage: ImageView = findViewById(R.id.info_voltage)
        setTooltip(infovoltage, "Electric difference generated by solar panels and stored in a battery.")

        val infostored: ImageView = findViewById(R.id.info_stored)
        setTooltip(infostored, "Stored voltage is the battery's energy, charged by solar panels.")

        val infobatt: ImageView = findViewById(R.id.info_batt)
        setTooltip(infobatt, "Battery stores energy from solar panels, providing power.")

        val infopercent: ImageView = findViewById(R.id.info_percent)
        setTooltip(infopercent, "Shows the percentage of the remaining charge, indicating available stored energy.")
    }

    private fun setTooltip(view: ImageView, message: String) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            view.tooltipText = message
        } else {
            view.setOnLongClickListener {
                Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
                true
            }
        }
    }

    private fun fetchDataAndDisplay() {
        databaseListener = object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                if (snapshot.exists()) {
                    // Retrieve battery data from Firebase
                    val batteryVoltage = snapshot.child("Battery Voltage").getValue(String::class.java)?.toFloatOrNull() ?: 0f
                    val batteryPercentage = snapshot.child("Battery Percentage").getValue(String::class.java)?.toFloatOrNull()
                    val isCharging = snapshot.child("isCharging").getValue(Boolean::class.java) ?: true

                    if (batteryPercentage != null) {
                        // Use Firebase battery data if available
                        binding.TextBatteryVoltage.text = batteryVoltage.toString()
                        binding.TextTodayBatteryValue.text = batteryPercentage.toString()
                        updateBatteryStatus(batteryPercentage, isCharging)
                    } else {
                        // If Firebase data is invalid, display an error or ask for a refresh
                        Log.d("BatteryPerformanceActivity", "Battery Percentage data is invalid in Firebase.")
                        // Optionally show an error message or ask the user to refresh
                    }

                    Log.d("BatteryPerformanceActivity", "Battery Voltage: $batteryVoltage")
                    Log.d("BatteryPerformanceActivity", "Battery Percentage: $batteryPercentage")
                    Log.d("BatteryPerformanceActivity", "Is Charging: $isCharging")
                } else {
                    Log.d("BatteryPerformanceActivity", "Data snapshot does not exist")
                    // Optionally handle the case where no data is available
                }
            }

            override fun onCancelled(error: DatabaseError) {
                Log.e("BatteryPerformanceActivity", "Database error: ${error.message}")
                Toast.makeText(this@BatteryPerformanceActivity, "Failed to load data", Toast.LENGTH_SHORT).show()
            }
        }
        database.addValueEventListener(databaseListener!!)
    }





    private fun updateBatteryStatus(batteryPercentage: Float, isCharging: Boolean) {
        val batteryStatusText = binding.TextBatteryStatus
        val batteryStatusIcon: ImageView = findViewById(R.id.battery_status)

        when {
            batteryPercentage >= 100 -> {
                batteryStatusText.text = getString(R.string.battery_fully_charged)
                batteryStatusIcon.setImageResource(R.drawable.full_charge)
            }
            isCharging -> {
                batteryStatusText.text = getString(R.string.battery_charging)
                batteryStatusIcon.setImageResource(R.drawable.charging)
            }
            else -> {
                batteryStatusText.text = getString(R.string.battery_not_charging)
                batteryStatusIcon.setImageResource(R.drawable.not_charging)
            }
        }

        // Debug log for notification logic
        if (batteryPercentage <= criticalBatteryThreshold) {
            Log.d("BatteryNotification", "Triggering notification. Battery: $batteryPercentage, Charging: $isCharging")
            showCriticalBatteryNotification(batteryPercentage)
        } else {
            Log.d("BatteryNotification", "No notification. Battery: $batteryPercentage, Charging: $isCharging")
        }
    }


    private fun updateBatteryStatusFromDevice() {
        // Use device data as fallback if Firebase data is not available
        val batteryStatusIntent = registerReceiver(null, IntentFilter(Intent.ACTION_BATTERY_CHANGED))

        val batteryLevel = batteryStatusIntent?.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) ?: 0
        val isCharging = batteryStatusIntent?.getIntExtra(BatteryManager.EXTRA_STATUS, -1) == BatteryManager.BATTERY_STATUS_CHARGING

        // Update the UI but do not trigger notifications based on device data
        updateBatteryStatus(batteryLevel.toFloat(), isCharging)
    }


    private fun showCriticalBatteryNotification(batteryPercentage: Float) {
        // Use the passed batteryPercentage in your logic
        val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        val channelId = "battery_alert_channel"
        val channelName = "Battery Alerts"

        // Create Notification Channel if the Android version supports it
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val channel = NotificationChannel(
                channelId,
                channelName,
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "Alerts for critical battery levels"
            }
            notificationManager.createNotificationChannel(channel)
        }

        if (batteryPercentage <= criticalBatteryThreshold) {
            // Build the notification
            val intent = Intent(this, BatteryPerformanceActivity::class.java)
            val pendingIntent = PendingIntent.getActivity(
                this,
                0,
                intent,
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )

            val notification = NotificationCompat.Builder(this, channelId)
                .setSmallIcon(R.drawable.ic_battery_low)
                .setContentTitle("Devices Available For Current Battery Percentage:")
                .setContentText("Mini Fan, Mini Lamp")
                .setAutoCancel(true)
                .setPriority(NotificationCompat.PRIORITY_HIGH)
                .setContentIntent(pendingIntent)
                .build()

            notificationManager.notify(1, notification)

            val notification2 = NotificationCompat.Builder(this, channelId)
                .setSmallIcon(R.drawable.ic_battery_low)
                .setContentTitle("Battery Low!")
                .setContentText("Battery is at $batteryPercentage%. Please charge it.")
                .setAutoCancel(true)
                .setPriority(NotificationCompat.PRIORITY_HIGH)
                .setContentIntent(pendingIntent)
                .build()

            notificationManager.notify(2, notification2) // Different notification ID
        }
    }





    override fun onDestroy() {
        super.onDestroy()

        // Unregister the receiver to avoid memory leaks
        unregisterReceiver(batteryReceiver)

        // Remove Firebase listener
        databaseListener?.let { database.removeEventListener(it) }
    }

    private fun setupMenuButtons() {
        val frameLayoutIds = listOf(
            R.id.WeatherFrameButton,
            R.id.BatteryFrameButton,
            R.id.PanelFrameButton,
            R.id.DevicesFrameButton,
            R.id.AccountFrameButton
        )

        val activities = listOf(
            WeatherActivity::class.java,
            BatteryPerformanceActivity::class.java,
            PanelPerformanceActivity::class.java,
            AvailableDevicesActivity::class.java,
            AccountActivity::class.java
        )

        ButtonUtils.setMenuButtonClickListener(this, frameLayoutIds, activities)
        popPlayer.start()
    }
}


